/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-4-24")
public class UIState implements org.apache.thrift.TBase<UIState, UIState._Fields>, java.io.Serializable, Cloneable, Comparable<UIState> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UIState");

  private static final org.apache.thrift.protocol.TField CPU_UTIL_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu_util", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField N_JOBS_PENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("nJobsPending", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField N_JOBS_COMPLETED_FIELD_DESC = new org.apache.thrift.protocol.TField("nJobsCompleted", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField F_THROTTLING_FIELD_DESC = new org.apache.thrift.protocol.TField("fThrottling", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField D_NETWORK_FIELD_DESC = new org.apache.thrift.protocol.TField("dNetwork", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UIStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UIStateTupleSchemeFactory());
  }

  public double cpu_util; // required
  public int nJobsPending; // required
  public int nJobsCompleted; // required
  public double fThrottling; // required
  public double dNetwork; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CPU_UTIL((short)1, "cpu_util"),
    N_JOBS_PENDING((short)2, "nJobsPending"),
    N_JOBS_COMPLETED((short)3, "nJobsCompleted"),
    F_THROTTLING((short)4, "fThrottling"),
    D_NETWORK((short)5, "dNetwork");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CPU_UTIL
          return CPU_UTIL;
        case 2: // N_JOBS_PENDING
          return N_JOBS_PENDING;
        case 3: // N_JOBS_COMPLETED
          return N_JOBS_COMPLETED;
        case 4: // F_THROTTLING
          return F_THROTTLING;
        case 5: // D_NETWORK
          return D_NETWORK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CPU_UTIL_ISSET_ID = 0;
  private static final int __NJOBSPENDING_ISSET_ID = 1;
  private static final int __NJOBSCOMPLETED_ISSET_ID = 2;
  private static final int __FTHROTTLING_ISSET_ID = 3;
  private static final int __DNETWORK_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CPU_UTIL, new org.apache.thrift.meta_data.FieldMetaData("cpu_util", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.N_JOBS_PENDING, new org.apache.thrift.meta_data.FieldMetaData("nJobsPending", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N_JOBS_COMPLETED, new org.apache.thrift.meta_data.FieldMetaData("nJobsCompleted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F_THROTTLING, new org.apache.thrift.meta_data.FieldMetaData("fThrottling", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.D_NETWORK, new org.apache.thrift.meta_data.FieldMetaData("dNetwork", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UIState.class, metaDataMap);
  }

  public UIState() {
  }

  public UIState(
    double cpu_util,
    int nJobsPending,
    int nJobsCompleted,
    double fThrottling,
    double dNetwork)
  {
    this();
    this.cpu_util = cpu_util;
    setCpu_utilIsSet(true);
    this.nJobsPending = nJobsPending;
    setNJobsPendingIsSet(true);
    this.nJobsCompleted = nJobsCompleted;
    setNJobsCompletedIsSet(true);
    this.fThrottling = fThrottling;
    setFThrottlingIsSet(true);
    this.dNetwork = dNetwork;
    setDNetworkIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UIState(UIState other) {
    __isset_bitfield = other.__isset_bitfield;
    this.cpu_util = other.cpu_util;
    this.nJobsPending = other.nJobsPending;
    this.nJobsCompleted = other.nJobsCompleted;
    this.fThrottling = other.fThrottling;
    this.dNetwork = other.dNetwork;
  }

  public UIState deepCopy() {
    return new UIState(this);
  }

  @Override
  public void clear() {
    setCpu_utilIsSet(false);
    this.cpu_util = 0.0;
    setNJobsPendingIsSet(false);
    this.nJobsPending = 0;
    setNJobsCompletedIsSet(false);
    this.nJobsCompleted = 0;
    setFThrottlingIsSet(false);
    this.fThrottling = 0.0;
    setDNetworkIsSet(false);
    this.dNetwork = 0.0;
  }

  public double getCpu_util() {
    return this.cpu_util;
  }

  public UIState setCpu_util(double cpu_util) {
    this.cpu_util = cpu_util;
    setCpu_utilIsSet(true);
    return this;
  }

  public void unsetCpu_util() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CPU_UTIL_ISSET_ID);
  }

  /** Returns true if field cpu_util is set (has been assigned a value) and false otherwise */
  public boolean isSetCpu_util() {
    return EncodingUtils.testBit(__isset_bitfield, __CPU_UTIL_ISSET_ID);
  }

  public void setCpu_utilIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CPU_UTIL_ISSET_ID, value);
  }

  public int getNJobsPending() {
    return this.nJobsPending;
  }

  public UIState setNJobsPending(int nJobsPending) {
    this.nJobsPending = nJobsPending;
    setNJobsPendingIsSet(true);
    return this;
  }

  public void unsetNJobsPending() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NJOBSPENDING_ISSET_ID);
  }

  /** Returns true if field nJobsPending is set (has been assigned a value) and false otherwise */
  public boolean isSetNJobsPending() {
    return EncodingUtils.testBit(__isset_bitfield, __NJOBSPENDING_ISSET_ID);
  }

  public void setNJobsPendingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NJOBSPENDING_ISSET_ID, value);
  }

  public int getNJobsCompleted() {
    return this.nJobsCompleted;
  }

  public UIState setNJobsCompleted(int nJobsCompleted) {
    this.nJobsCompleted = nJobsCompleted;
    setNJobsCompletedIsSet(true);
    return this;
  }

  public void unsetNJobsCompleted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NJOBSCOMPLETED_ISSET_ID);
  }

  /** Returns true if field nJobsCompleted is set (has been assigned a value) and false otherwise */
  public boolean isSetNJobsCompleted() {
    return EncodingUtils.testBit(__isset_bitfield, __NJOBSCOMPLETED_ISSET_ID);
  }

  public void setNJobsCompletedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NJOBSCOMPLETED_ISSET_ID, value);
  }

  public double getFThrottling() {
    return this.fThrottling;
  }

  public UIState setFThrottling(double fThrottling) {
    this.fThrottling = fThrottling;
    setFThrottlingIsSet(true);
    return this;
  }

  public void unsetFThrottling() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FTHROTTLING_ISSET_ID);
  }

  /** Returns true if field fThrottling is set (has been assigned a value) and false otherwise */
  public boolean isSetFThrottling() {
    return EncodingUtils.testBit(__isset_bitfield, __FTHROTTLING_ISSET_ID);
  }

  public void setFThrottlingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FTHROTTLING_ISSET_ID, value);
  }

  public double getDNetwork() {
    return this.dNetwork;
  }

  public UIState setDNetwork(double dNetwork) {
    this.dNetwork = dNetwork;
    setDNetworkIsSet(true);
    return this;
  }

  public void unsetDNetwork() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DNETWORK_ISSET_ID);
  }

  /** Returns true if field dNetwork is set (has been assigned a value) and false otherwise */
  public boolean isSetDNetwork() {
    return EncodingUtils.testBit(__isset_bitfield, __DNETWORK_ISSET_ID);
  }

  public void setDNetworkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DNETWORK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CPU_UTIL:
      if (value == null) {
        unsetCpu_util();
      } else {
        setCpu_util((Double)value);
      }
      break;

    case N_JOBS_PENDING:
      if (value == null) {
        unsetNJobsPending();
      } else {
        setNJobsPending((Integer)value);
      }
      break;

    case N_JOBS_COMPLETED:
      if (value == null) {
        unsetNJobsCompleted();
      } else {
        setNJobsCompleted((Integer)value);
      }
      break;

    case F_THROTTLING:
      if (value == null) {
        unsetFThrottling();
      } else {
        setFThrottling((Double)value);
      }
      break;

    case D_NETWORK:
      if (value == null) {
        unsetDNetwork();
      } else {
        setDNetwork((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CPU_UTIL:
      return Double.valueOf(getCpu_util());

    case N_JOBS_PENDING:
      return Integer.valueOf(getNJobsPending());

    case N_JOBS_COMPLETED:
      return Integer.valueOf(getNJobsCompleted());

    case F_THROTTLING:
      return Double.valueOf(getFThrottling());

    case D_NETWORK:
      return Double.valueOf(getDNetwork());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CPU_UTIL:
      return isSetCpu_util();
    case N_JOBS_PENDING:
      return isSetNJobsPending();
    case N_JOBS_COMPLETED:
      return isSetNJobsCompleted();
    case F_THROTTLING:
      return isSetFThrottling();
    case D_NETWORK:
      return isSetDNetwork();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UIState)
      return this.equals((UIState)that);
    return false;
  }

  public boolean equals(UIState that) {
    if (that == null)
      return false;

    boolean this_present_cpu_util = true;
    boolean that_present_cpu_util = true;
    if (this_present_cpu_util || that_present_cpu_util) {
      if (!(this_present_cpu_util && that_present_cpu_util))
        return false;
      if (this.cpu_util != that.cpu_util)
        return false;
    }

    boolean this_present_nJobsPending = true;
    boolean that_present_nJobsPending = true;
    if (this_present_nJobsPending || that_present_nJobsPending) {
      if (!(this_present_nJobsPending && that_present_nJobsPending))
        return false;
      if (this.nJobsPending != that.nJobsPending)
        return false;
    }

    boolean this_present_nJobsCompleted = true;
    boolean that_present_nJobsCompleted = true;
    if (this_present_nJobsCompleted || that_present_nJobsCompleted) {
      if (!(this_present_nJobsCompleted && that_present_nJobsCompleted))
        return false;
      if (this.nJobsCompleted != that.nJobsCompleted)
        return false;
    }

    boolean this_present_fThrottling = true;
    boolean that_present_fThrottling = true;
    if (this_present_fThrottling || that_present_fThrottling) {
      if (!(this_present_fThrottling && that_present_fThrottling))
        return false;
      if (this.fThrottling != that.fThrottling)
        return false;
    }

    boolean this_present_dNetwork = true;
    boolean that_present_dNetwork = true;
    if (this_present_dNetwork || that_present_dNetwork) {
      if (!(this_present_dNetwork && that_present_dNetwork))
        return false;
      if (this.dNetwork != that.dNetwork)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_cpu_util = true;
    list.add(present_cpu_util);
    if (present_cpu_util)
      list.add(cpu_util);

    boolean present_nJobsPending = true;
    list.add(present_nJobsPending);
    if (present_nJobsPending)
      list.add(nJobsPending);

    boolean present_nJobsCompleted = true;
    list.add(present_nJobsCompleted);
    if (present_nJobsCompleted)
      list.add(nJobsCompleted);

    boolean present_fThrottling = true;
    list.add(present_fThrottling);
    if (present_fThrottling)
      list.add(fThrottling);

    boolean present_dNetwork = true;
    list.add(present_dNetwork);
    if (present_dNetwork)
      list.add(dNetwork);

    return list.hashCode();
  }

  @Override
  public int compareTo(UIState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCpu_util()).compareTo(other.isSetCpu_util());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpu_util()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu_util, other.cpu_util);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNJobsPending()).compareTo(other.isSetNJobsPending());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNJobsPending()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nJobsPending, other.nJobsPending);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNJobsCompleted()).compareTo(other.isSetNJobsCompleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNJobsCompleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nJobsCompleted, other.nJobsCompleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFThrottling()).compareTo(other.isSetFThrottling());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFThrottling()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fThrottling, other.fThrottling);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDNetwork()).compareTo(other.isSetDNetwork());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDNetwork()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dNetwork, other.dNetwork);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UIState(");
    boolean first = true;

    sb.append("cpu_util:");
    sb.append(this.cpu_util);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nJobsPending:");
    sb.append(this.nJobsPending);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nJobsCompleted:");
    sb.append(this.nJobsCompleted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fThrottling:");
    sb.append(this.fThrottling);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dNetwork:");
    sb.append(this.dNetwork);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UIStateStandardSchemeFactory implements SchemeFactory {
    public UIStateStandardScheme getScheme() {
      return new UIStateStandardScheme();
    }
  }

  private static class UIStateStandardScheme extends StandardScheme<UIState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UIState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CPU_UTIL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cpu_util = iprot.readDouble();
              struct.setCpu_utilIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // N_JOBS_PENDING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nJobsPending = iprot.readI32();
              struct.setNJobsPendingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // N_JOBS_COMPLETED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nJobsCompleted = iprot.readI32();
              struct.setNJobsCompletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // F_THROTTLING
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fThrottling = iprot.readDouble();
              struct.setFThrottlingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // D_NETWORK
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dNetwork = iprot.readDouble();
              struct.setDNetworkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UIState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CPU_UTIL_FIELD_DESC);
      oprot.writeDouble(struct.cpu_util);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N_JOBS_PENDING_FIELD_DESC);
      oprot.writeI32(struct.nJobsPending);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N_JOBS_COMPLETED_FIELD_DESC);
      oprot.writeI32(struct.nJobsCompleted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F_THROTTLING_FIELD_DESC);
      oprot.writeDouble(struct.fThrottling);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(D_NETWORK_FIELD_DESC);
      oprot.writeDouble(struct.dNetwork);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UIStateTupleSchemeFactory implements SchemeFactory {
    public UIStateTupleScheme getScheme() {
      return new UIStateTupleScheme();
    }
  }

  private static class UIStateTupleScheme extends TupleScheme<UIState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UIState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCpu_util()) {
        optionals.set(0);
      }
      if (struct.isSetNJobsPending()) {
        optionals.set(1);
      }
      if (struct.isSetNJobsCompleted()) {
        optionals.set(2);
      }
      if (struct.isSetFThrottling()) {
        optionals.set(3);
      }
      if (struct.isSetDNetwork()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCpu_util()) {
        oprot.writeDouble(struct.cpu_util);
      }
      if (struct.isSetNJobsPending()) {
        oprot.writeI32(struct.nJobsPending);
      }
      if (struct.isSetNJobsCompleted()) {
        oprot.writeI32(struct.nJobsCompleted);
      }
      if (struct.isSetFThrottling()) {
        oprot.writeDouble(struct.fThrottling);
      }
      if (struct.isSetDNetwork()) {
        oprot.writeDouble(struct.dNetwork);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UIState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.cpu_util = iprot.readDouble();
        struct.setCpu_utilIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nJobsPending = iprot.readI32();
        struct.setNJobsPendingIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nJobsCompleted = iprot.readI32();
        struct.setNJobsCompletedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fThrottling = iprot.readDouble();
        struct.setFThrottlingIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dNetwork = iprot.readDouble();
        struct.setDNetworkIsSet(true);
      }
    }
  }

}

