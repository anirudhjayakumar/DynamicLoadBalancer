/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-4-24")
public class DynLBServer {

  public interface Iface {

    public void SendJobsToRemote(int size, List<ByteBuffer> vJobs) throws org.apache.thrift.TException;

    public void RequestJobsFromRemote(int nJobs) throws org.apache.thrift.TException;

    public void SendStateToRemote(ByteBuffer stateBlob) throws org.apache.thrift.TException;

    public void RequestStateFromRemote() throws org.apache.thrift.TException;

    public void SendCompletedJobsToRemote(int size, List<ByteBuffer> vJobs) throws org.apache.thrift.TException;

    public void RequestCompletedJobsFromRemote() throws org.apache.thrift.TException;

    public UIState GetStateInfo() throws org.apache.thrift.TException;

    public void SetThrottling(double throttling) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void SendJobsToRemote(int size, List<ByteBuffer> vJobs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void RequestJobsFromRemote(int nJobs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void SendStateToRemote(ByteBuffer stateBlob, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void RequestStateFromRemote(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void SendCompletedJobsToRemote(int size, List<ByteBuffer> vJobs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void RequestCompletedJobsFromRemote(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetStateInfo(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void SetThrottling(double throttling, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void SendJobsToRemote(int size, List<ByteBuffer> vJobs) throws org.apache.thrift.TException
    {
      send_SendJobsToRemote(size, vJobs);
    }

    public void send_SendJobsToRemote(int size, List<ByteBuffer> vJobs) throws org.apache.thrift.TException
    {
      SendJobsToRemote_args args = new SendJobsToRemote_args();
      args.setSize(size);
      args.setVJobs(vJobs);
      sendBase("SendJobsToRemote", args);
    }

    public void RequestJobsFromRemote(int nJobs) throws org.apache.thrift.TException
    {
      send_RequestJobsFromRemote(nJobs);
    }

    public void send_RequestJobsFromRemote(int nJobs) throws org.apache.thrift.TException
    {
      RequestJobsFromRemote_args args = new RequestJobsFromRemote_args();
      args.setNJobs(nJobs);
      sendBase("RequestJobsFromRemote", args);
    }

    public void SendStateToRemote(ByteBuffer stateBlob) throws org.apache.thrift.TException
    {
      send_SendStateToRemote(stateBlob);
    }

    public void send_SendStateToRemote(ByteBuffer stateBlob) throws org.apache.thrift.TException
    {
      SendStateToRemote_args args = new SendStateToRemote_args();
      args.setStateBlob(stateBlob);
      sendBase("SendStateToRemote", args);
    }

    public void RequestStateFromRemote() throws org.apache.thrift.TException
    {
      send_RequestStateFromRemote();
    }

    public void send_RequestStateFromRemote() throws org.apache.thrift.TException
    {
      RequestStateFromRemote_args args = new RequestStateFromRemote_args();
      sendBase("RequestStateFromRemote", args);
    }

    public void SendCompletedJobsToRemote(int size, List<ByteBuffer> vJobs) throws org.apache.thrift.TException
    {
      send_SendCompletedJobsToRemote(size, vJobs);
    }

    public void send_SendCompletedJobsToRemote(int size, List<ByteBuffer> vJobs) throws org.apache.thrift.TException
    {
      SendCompletedJobsToRemote_args args = new SendCompletedJobsToRemote_args();
      args.setSize(size);
      args.setVJobs(vJobs);
      sendBase("SendCompletedJobsToRemote", args);
    }

    public void RequestCompletedJobsFromRemote() throws org.apache.thrift.TException
    {
      send_RequestCompletedJobsFromRemote();
    }

    public void send_RequestCompletedJobsFromRemote() throws org.apache.thrift.TException
    {
      RequestCompletedJobsFromRemote_args args = new RequestCompletedJobsFromRemote_args();
      sendBase("RequestCompletedJobsFromRemote", args);
    }

    public UIState GetStateInfo() throws org.apache.thrift.TException
    {
      send_GetStateInfo();
      return recv_GetStateInfo();
    }

    public void send_GetStateInfo() throws org.apache.thrift.TException
    {
      GetStateInfo_args args = new GetStateInfo_args();
      sendBase("GetStateInfo", args);
    }

    public UIState recv_GetStateInfo() throws org.apache.thrift.TException
    {
      GetStateInfo_result result = new GetStateInfo_result();
      receiveBase(result, "GetStateInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetStateInfo failed: unknown result");
    }

    public void SetThrottling(double throttling) throws org.apache.thrift.TException
    {
      send_SetThrottling(throttling);
      recv_SetThrottling();
    }

    public void send_SetThrottling(double throttling) throws org.apache.thrift.TException
    {
      SetThrottling_args args = new SetThrottling_args();
      args.setThrottling(throttling);
      sendBase("SetThrottling", args);
    }

    public void recv_SetThrottling() throws org.apache.thrift.TException
    {
      SetThrottling_result result = new SetThrottling_result();
      receiveBase(result, "SetThrottling");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void SendJobsToRemote(int size, List<ByteBuffer> vJobs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SendJobsToRemote_call method_call = new SendJobsToRemote_call(size, vJobs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SendJobsToRemote_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int size;
      private List<ByteBuffer> vJobs;
      public SendJobsToRemote_call(int size, List<ByteBuffer> vJobs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.size = size;
        this.vJobs = vJobs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SendJobsToRemote", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        SendJobsToRemote_args args = new SendJobsToRemote_args();
        args.setSize(size);
        args.setVJobs(vJobs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void RequestJobsFromRemote(int nJobs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RequestJobsFromRemote_call method_call = new RequestJobsFromRemote_call(nJobs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RequestJobsFromRemote_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int nJobs;
      public RequestJobsFromRemote_call(int nJobs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.nJobs = nJobs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RequestJobsFromRemote", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        RequestJobsFromRemote_args args = new RequestJobsFromRemote_args();
        args.setNJobs(nJobs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void SendStateToRemote(ByteBuffer stateBlob, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SendStateToRemote_call method_call = new SendStateToRemote_call(stateBlob, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SendStateToRemote_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer stateBlob;
      public SendStateToRemote_call(ByteBuffer stateBlob, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.stateBlob = stateBlob;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SendStateToRemote", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        SendStateToRemote_args args = new SendStateToRemote_args();
        args.setStateBlob(stateBlob);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void RequestStateFromRemote(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RequestStateFromRemote_call method_call = new RequestStateFromRemote_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RequestStateFromRemote_call extends org.apache.thrift.async.TAsyncMethodCall {
      public RequestStateFromRemote_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RequestStateFromRemote", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        RequestStateFromRemote_args args = new RequestStateFromRemote_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void SendCompletedJobsToRemote(int size, List<ByteBuffer> vJobs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SendCompletedJobsToRemote_call method_call = new SendCompletedJobsToRemote_call(size, vJobs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SendCompletedJobsToRemote_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int size;
      private List<ByteBuffer> vJobs;
      public SendCompletedJobsToRemote_call(int size, List<ByteBuffer> vJobs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.size = size;
        this.vJobs = vJobs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SendCompletedJobsToRemote", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        SendCompletedJobsToRemote_args args = new SendCompletedJobsToRemote_args();
        args.setSize(size);
        args.setVJobs(vJobs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void RequestCompletedJobsFromRemote(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RequestCompletedJobsFromRemote_call method_call = new RequestCompletedJobsFromRemote_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RequestCompletedJobsFromRemote_call extends org.apache.thrift.async.TAsyncMethodCall {
      public RequestCompletedJobsFromRemote_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RequestCompletedJobsFromRemote", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        RequestCompletedJobsFromRemote_args args = new RequestCompletedJobsFromRemote_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void GetStateInfo(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetStateInfo_call method_call = new GetStateInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetStateInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetStateInfo_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetStateInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetStateInfo_args args = new GetStateInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UIState getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetStateInfo();
      }
    }

    public void SetThrottling(double throttling, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetThrottling_call method_call = new SetThrottling_call(throttling, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetThrottling_call extends org.apache.thrift.async.TAsyncMethodCall {
      private double throttling;
      public SetThrottling_call(double throttling, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.throttling = throttling;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetThrottling", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetThrottling_args args = new SetThrottling_args();
        args.setThrottling(throttling);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SetThrottling();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("SendJobsToRemote", new SendJobsToRemote());
      processMap.put("RequestJobsFromRemote", new RequestJobsFromRemote());
      processMap.put("SendStateToRemote", new SendStateToRemote());
      processMap.put("RequestStateFromRemote", new RequestStateFromRemote());
      processMap.put("SendCompletedJobsToRemote", new SendCompletedJobsToRemote());
      processMap.put("RequestCompletedJobsFromRemote", new RequestCompletedJobsFromRemote());
      processMap.put("GetStateInfo", new GetStateInfo());
      processMap.put("SetThrottling", new SetThrottling());
      return processMap;
    }

    public static class SendJobsToRemote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SendJobsToRemote_args> {
      public SendJobsToRemote() {
        super("SendJobsToRemote");
      }

      public SendJobsToRemote_args getEmptyArgsInstance() {
        return new SendJobsToRemote_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, SendJobsToRemote_args args) throws org.apache.thrift.TException {
        iface.SendJobsToRemote(args.size, args.vJobs);
        return null;
      }
    }

    public static class RequestJobsFromRemote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RequestJobsFromRemote_args> {
      public RequestJobsFromRemote() {
        super("RequestJobsFromRemote");
      }

      public RequestJobsFromRemote_args getEmptyArgsInstance() {
        return new RequestJobsFromRemote_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, RequestJobsFromRemote_args args) throws org.apache.thrift.TException {
        iface.RequestJobsFromRemote(args.nJobs);
        return null;
      }
    }

    public static class SendStateToRemote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SendStateToRemote_args> {
      public SendStateToRemote() {
        super("SendStateToRemote");
      }

      public SendStateToRemote_args getEmptyArgsInstance() {
        return new SendStateToRemote_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, SendStateToRemote_args args) throws org.apache.thrift.TException {
        iface.SendStateToRemote(args.stateBlob);
        return null;
      }
    }

    public static class RequestStateFromRemote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RequestStateFromRemote_args> {
      public RequestStateFromRemote() {
        super("RequestStateFromRemote");
      }

      public RequestStateFromRemote_args getEmptyArgsInstance() {
        return new RequestStateFromRemote_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, RequestStateFromRemote_args args) throws org.apache.thrift.TException {
        iface.RequestStateFromRemote();
        return null;
      }
    }

    public static class SendCompletedJobsToRemote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SendCompletedJobsToRemote_args> {
      public SendCompletedJobsToRemote() {
        super("SendCompletedJobsToRemote");
      }

      public SendCompletedJobsToRemote_args getEmptyArgsInstance() {
        return new SendCompletedJobsToRemote_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, SendCompletedJobsToRemote_args args) throws org.apache.thrift.TException {
        iface.SendCompletedJobsToRemote(args.size, args.vJobs);
        return null;
      }
    }

    public static class RequestCompletedJobsFromRemote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RequestCompletedJobsFromRemote_args> {
      public RequestCompletedJobsFromRemote() {
        super("RequestCompletedJobsFromRemote");
      }

      public RequestCompletedJobsFromRemote_args getEmptyArgsInstance() {
        return new RequestCompletedJobsFromRemote_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, RequestCompletedJobsFromRemote_args args) throws org.apache.thrift.TException {
        iface.RequestCompletedJobsFromRemote();
        return null;
      }
    }

    public static class GetStateInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetStateInfo_args> {
      public GetStateInfo() {
        super("GetStateInfo");
      }

      public GetStateInfo_args getEmptyArgsInstance() {
        return new GetStateInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetStateInfo_result getResult(I iface, GetStateInfo_args args) throws org.apache.thrift.TException {
        GetStateInfo_result result = new GetStateInfo_result();
        result.success = iface.GetStateInfo();
        return result;
      }
    }

    public static class SetThrottling<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetThrottling_args> {
      public SetThrottling() {
        super("SetThrottling");
      }

      public SetThrottling_args getEmptyArgsInstance() {
        return new SetThrottling_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public SetThrottling_result getResult(I iface, SetThrottling_args args) throws org.apache.thrift.TException {
        SetThrottling_result result = new SetThrottling_result();
        iface.SetThrottling(args.throttling);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("SendJobsToRemote", new SendJobsToRemote());
      processMap.put("RequestJobsFromRemote", new RequestJobsFromRemote());
      processMap.put("SendStateToRemote", new SendStateToRemote());
      processMap.put("RequestStateFromRemote", new RequestStateFromRemote());
      processMap.put("SendCompletedJobsToRemote", new SendCompletedJobsToRemote());
      processMap.put("RequestCompletedJobsFromRemote", new RequestCompletedJobsFromRemote());
      processMap.put("GetStateInfo", new GetStateInfo());
      processMap.put("SetThrottling", new SetThrottling());
      return processMap;
    }

    public static class SendJobsToRemote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SendJobsToRemote_args, Void> {
      public SendJobsToRemote() {
        super("SendJobsToRemote");
      }

      public SendJobsToRemote_args getEmptyArgsInstance() {
        return new SendJobsToRemote_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, SendJobsToRemote_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.SendJobsToRemote(args.size, args.vJobs,resultHandler);
      }
    }

    public static class RequestJobsFromRemote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RequestJobsFromRemote_args, Void> {
      public RequestJobsFromRemote() {
        super("RequestJobsFromRemote");
      }

      public RequestJobsFromRemote_args getEmptyArgsInstance() {
        return new RequestJobsFromRemote_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, RequestJobsFromRemote_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.RequestJobsFromRemote(args.nJobs,resultHandler);
      }
    }

    public static class SendStateToRemote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SendStateToRemote_args, Void> {
      public SendStateToRemote() {
        super("SendStateToRemote");
      }

      public SendStateToRemote_args getEmptyArgsInstance() {
        return new SendStateToRemote_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, SendStateToRemote_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.SendStateToRemote(args.stateBlob,resultHandler);
      }
    }

    public static class RequestStateFromRemote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RequestStateFromRemote_args, Void> {
      public RequestStateFromRemote() {
        super("RequestStateFromRemote");
      }

      public RequestStateFromRemote_args getEmptyArgsInstance() {
        return new RequestStateFromRemote_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, RequestStateFromRemote_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.RequestStateFromRemote(resultHandler);
      }
    }

    public static class SendCompletedJobsToRemote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SendCompletedJobsToRemote_args, Void> {
      public SendCompletedJobsToRemote() {
        super("SendCompletedJobsToRemote");
      }

      public SendCompletedJobsToRemote_args getEmptyArgsInstance() {
        return new SendCompletedJobsToRemote_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, SendCompletedJobsToRemote_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.SendCompletedJobsToRemote(args.size, args.vJobs,resultHandler);
      }
    }

    public static class RequestCompletedJobsFromRemote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RequestCompletedJobsFromRemote_args, Void> {
      public RequestCompletedJobsFromRemote() {
        super("RequestCompletedJobsFromRemote");
      }

      public RequestCompletedJobsFromRemote_args getEmptyArgsInstance() {
        return new RequestCompletedJobsFromRemote_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, RequestCompletedJobsFromRemote_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.RequestCompletedJobsFromRemote(resultHandler);
      }
    }

    public static class GetStateInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetStateInfo_args, UIState> {
      public GetStateInfo() {
        super("GetStateInfo");
      }

      public GetStateInfo_args getEmptyArgsInstance() {
        return new GetStateInfo_args();
      }

      public AsyncMethodCallback<UIState> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UIState>() { 
          public void onComplete(UIState o) {
            GetStateInfo_result result = new GetStateInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetStateInfo_result result = new GetStateInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetStateInfo_args args, org.apache.thrift.async.AsyncMethodCallback<UIState> resultHandler) throws TException {
        iface.GetStateInfo(resultHandler);
      }
    }

    public static class SetThrottling<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SetThrottling_args, Void> {
      public SetThrottling() {
        super("SetThrottling");
      }

      public SetThrottling_args getEmptyArgsInstance() {
        return new SetThrottling_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            SetThrottling_result result = new SetThrottling_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            SetThrottling_result result = new SetThrottling_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, SetThrottling_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.SetThrottling(args.throttling,resultHandler);
      }
    }

  }

  public static class SendJobsToRemote_args implements org.apache.thrift.TBase<SendJobsToRemote_args, SendJobsToRemote_args._Fields>, java.io.Serializable, Cloneable, Comparable<SendJobsToRemote_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendJobsToRemote_args");

    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField V_JOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("vJobs", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SendJobsToRemote_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SendJobsToRemote_argsTupleSchemeFactory());
    }

    public int size; // required
    public List<ByteBuffer> vJobs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIZE((short)1, "size"),
      V_JOBS((short)2, "vJobs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIZE
            return SIZE;
          case 2: // V_JOBS
            return V_JOBS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SIZE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.V_JOBS, new org.apache.thrift.meta_data.FieldMetaData("vJobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendJobsToRemote_args.class, metaDataMap);
    }

    public SendJobsToRemote_args() {
    }

    public SendJobsToRemote_args(
      int size,
      List<ByteBuffer> vJobs)
    {
      this();
      this.size = size;
      setSizeIsSet(true);
      this.vJobs = vJobs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SendJobsToRemote_args(SendJobsToRemote_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.size = other.size;
      if (other.isSetVJobs()) {
        List<ByteBuffer> __this__vJobs = new ArrayList<ByteBuffer>(other.vJobs);
        this.vJobs = __this__vJobs;
      }
    }

    public SendJobsToRemote_args deepCopy() {
      return new SendJobsToRemote_args(this);
    }

    @Override
    public void clear() {
      setSizeIsSet(false);
      this.size = 0;
      this.vJobs = null;
    }

    public int getSize() {
      return this.size;
    }

    public SendJobsToRemote_args setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
      return this;
    }

    public void unsetSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
    }

    public int getVJobsSize() {
      return (this.vJobs == null) ? 0 : this.vJobs.size();
    }

    public java.util.Iterator<ByteBuffer> getVJobsIterator() {
      return (this.vJobs == null) ? null : this.vJobs.iterator();
    }

    public void addToVJobs(ByteBuffer elem) {
      if (this.vJobs == null) {
        this.vJobs = new ArrayList<ByteBuffer>();
      }
      this.vJobs.add(elem);
    }

    public List<ByteBuffer> getVJobs() {
      return this.vJobs;
    }

    public SendJobsToRemote_args setVJobs(List<ByteBuffer> vJobs) {
      this.vJobs = vJobs;
      return this;
    }

    public void unsetVJobs() {
      this.vJobs = null;
    }

    /** Returns true if field vJobs is set (has been assigned a value) and false otherwise */
    public boolean isSetVJobs() {
      return this.vJobs != null;
    }

    public void setVJobsIsSet(boolean value) {
      if (!value) {
        this.vJobs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          setSize((Integer)value);
        }
        break;

      case V_JOBS:
        if (value == null) {
          unsetVJobs();
        } else {
          setVJobs((List<ByteBuffer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIZE:
        return Integer.valueOf(getSize());

      case V_JOBS:
        return getVJobs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIZE:
        return isSetSize();
      case V_JOBS:
        return isSetVJobs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SendJobsToRemote_args)
        return this.equals((SendJobsToRemote_args)that);
      return false;
    }

    public boolean equals(SendJobsToRemote_args that) {
      if (that == null)
        return false;

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      boolean this_present_vJobs = true && this.isSetVJobs();
      boolean that_present_vJobs = true && that.isSetVJobs();
      if (this_present_vJobs || that_present_vJobs) {
        if (!(this_present_vJobs && that_present_vJobs))
          return false;
        if (!this.vJobs.equals(that.vJobs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_size = true;
      list.add(present_size);
      if (present_size)
        list.add(size);

      boolean present_vJobs = true && (isSetVJobs());
      list.add(present_vJobs);
      if (present_vJobs)
        list.add(vJobs);

      return list.hashCode();
    }

    @Override
    public int compareTo(SendJobsToRemote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVJobs()).compareTo(other.isSetVJobs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVJobs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vJobs, other.vJobs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SendJobsToRemote_args(");
      boolean first = true;

      sb.append("size:");
      sb.append(this.size);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vJobs:");
      if (this.vJobs == null) {
        sb.append("null");
      } else {
        sb.append(this.vJobs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SendJobsToRemote_argsStandardSchemeFactory implements SchemeFactory {
      public SendJobsToRemote_argsStandardScheme getScheme() {
        return new SendJobsToRemote_argsStandardScheme();
      }
    }

    private static class SendJobsToRemote_argsStandardScheme extends StandardScheme<SendJobsToRemote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SendJobsToRemote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.size = iprot.readI32();
                struct.setSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // V_JOBS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.vJobs = new ArrayList<ByteBuffer>(_list0.size);
                  ByteBuffer _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readBinary();
                    struct.vJobs.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setVJobsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SendJobsToRemote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        oprot.writeI32(struct.size);
        oprot.writeFieldEnd();
        if (struct.vJobs != null) {
          oprot.writeFieldBegin(V_JOBS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.vJobs.size()));
            for (ByteBuffer _iter3 : struct.vJobs)
            {
              oprot.writeBinary(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SendJobsToRemote_argsTupleSchemeFactory implements SchemeFactory {
      public SendJobsToRemote_argsTupleScheme getScheme() {
        return new SendJobsToRemote_argsTupleScheme();
      }
    }

    private static class SendJobsToRemote_argsTupleScheme extends TupleScheme<SendJobsToRemote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SendJobsToRemote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSize()) {
          optionals.set(0);
        }
        if (struct.isSetVJobs()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSize()) {
          oprot.writeI32(struct.size);
        }
        if (struct.isSetVJobs()) {
          {
            oprot.writeI32(struct.vJobs.size());
            for (ByteBuffer _iter4 : struct.vJobs)
            {
              oprot.writeBinary(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SendJobsToRemote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.size = iprot.readI32();
          struct.setSizeIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.vJobs = new ArrayList<ByteBuffer>(_list5.size);
            ByteBuffer _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readBinary();
              struct.vJobs.add(_elem6);
            }
          }
          struct.setVJobsIsSet(true);
        }
      }
    }

  }

  public static class RequestJobsFromRemote_args implements org.apache.thrift.TBase<RequestJobsFromRemote_args, RequestJobsFromRemote_args._Fields>, java.io.Serializable, Cloneable, Comparable<RequestJobsFromRemote_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestJobsFromRemote_args");

    private static final org.apache.thrift.protocol.TField N_JOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("nJobs", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RequestJobsFromRemote_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RequestJobsFromRemote_argsTupleSchemeFactory());
    }

    public int nJobs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      N_JOBS((short)1, "nJobs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // N_JOBS
            return N_JOBS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NJOBS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.N_JOBS, new org.apache.thrift.meta_data.FieldMetaData("nJobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestJobsFromRemote_args.class, metaDataMap);
    }

    public RequestJobsFromRemote_args() {
    }

    public RequestJobsFromRemote_args(
      int nJobs)
    {
      this();
      this.nJobs = nJobs;
      setNJobsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestJobsFromRemote_args(RequestJobsFromRemote_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nJobs = other.nJobs;
    }

    public RequestJobsFromRemote_args deepCopy() {
      return new RequestJobsFromRemote_args(this);
    }

    @Override
    public void clear() {
      setNJobsIsSet(false);
      this.nJobs = 0;
    }

    public int getNJobs() {
      return this.nJobs;
    }

    public RequestJobsFromRemote_args setNJobs(int nJobs) {
      this.nJobs = nJobs;
      setNJobsIsSet(true);
      return this;
    }

    public void unsetNJobs() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NJOBS_ISSET_ID);
    }

    /** Returns true if field nJobs is set (has been assigned a value) and false otherwise */
    public boolean isSetNJobs() {
      return EncodingUtils.testBit(__isset_bitfield, __NJOBS_ISSET_ID);
    }

    public void setNJobsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NJOBS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case N_JOBS:
        if (value == null) {
          unsetNJobs();
        } else {
          setNJobs((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case N_JOBS:
        return Integer.valueOf(getNJobs());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case N_JOBS:
        return isSetNJobs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RequestJobsFromRemote_args)
        return this.equals((RequestJobsFromRemote_args)that);
      return false;
    }

    public boolean equals(RequestJobsFromRemote_args that) {
      if (that == null)
        return false;

      boolean this_present_nJobs = true;
      boolean that_present_nJobs = true;
      if (this_present_nJobs || that_present_nJobs) {
        if (!(this_present_nJobs && that_present_nJobs))
          return false;
        if (this.nJobs != that.nJobs)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nJobs = true;
      list.add(present_nJobs);
      if (present_nJobs)
        list.add(nJobs);

      return list.hashCode();
    }

    @Override
    public int compareTo(RequestJobsFromRemote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNJobs()).compareTo(other.isSetNJobs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNJobs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nJobs, other.nJobs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RequestJobsFromRemote_args(");
      boolean first = true;

      sb.append("nJobs:");
      sb.append(this.nJobs);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestJobsFromRemote_argsStandardSchemeFactory implements SchemeFactory {
      public RequestJobsFromRemote_argsStandardScheme getScheme() {
        return new RequestJobsFromRemote_argsStandardScheme();
      }
    }

    private static class RequestJobsFromRemote_argsStandardScheme extends StandardScheme<RequestJobsFromRemote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestJobsFromRemote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // N_JOBS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nJobs = iprot.readI32();
                struct.setNJobsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestJobsFromRemote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(N_JOBS_FIELD_DESC);
        oprot.writeI32(struct.nJobs);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestJobsFromRemote_argsTupleSchemeFactory implements SchemeFactory {
      public RequestJobsFromRemote_argsTupleScheme getScheme() {
        return new RequestJobsFromRemote_argsTupleScheme();
      }
    }

    private static class RequestJobsFromRemote_argsTupleScheme extends TupleScheme<RequestJobsFromRemote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestJobsFromRemote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNJobs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNJobs()) {
          oprot.writeI32(struct.nJobs);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestJobsFromRemote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nJobs = iprot.readI32();
          struct.setNJobsIsSet(true);
        }
      }
    }

  }

  public static class SendStateToRemote_args implements org.apache.thrift.TBase<SendStateToRemote_args, SendStateToRemote_args._Fields>, java.io.Serializable, Cloneable, Comparable<SendStateToRemote_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendStateToRemote_args");

    private static final org.apache.thrift.protocol.TField STATE_BLOB_FIELD_DESC = new org.apache.thrift.protocol.TField("stateBlob", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SendStateToRemote_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SendStateToRemote_argsTupleSchemeFactory());
    }

    public ByteBuffer stateBlob; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATE_BLOB((short)1, "stateBlob");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATE_BLOB
            return STATE_BLOB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATE_BLOB, new org.apache.thrift.meta_data.FieldMetaData("stateBlob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendStateToRemote_args.class, metaDataMap);
    }

    public SendStateToRemote_args() {
    }

    public SendStateToRemote_args(
      ByteBuffer stateBlob)
    {
      this();
      this.stateBlob = org.apache.thrift.TBaseHelper.copyBinary(stateBlob);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SendStateToRemote_args(SendStateToRemote_args other) {
      if (other.isSetStateBlob()) {
        this.stateBlob = org.apache.thrift.TBaseHelper.copyBinary(other.stateBlob);
      }
    }

    public SendStateToRemote_args deepCopy() {
      return new SendStateToRemote_args(this);
    }

    @Override
    public void clear() {
      this.stateBlob = null;
    }

    public byte[] getStateBlob() {
      setStateBlob(org.apache.thrift.TBaseHelper.rightSize(stateBlob));
      return stateBlob == null ? null : stateBlob.array();
    }

    public ByteBuffer bufferForStateBlob() {
      return org.apache.thrift.TBaseHelper.copyBinary(stateBlob);
    }

    public SendStateToRemote_args setStateBlob(byte[] stateBlob) {
      this.stateBlob = stateBlob == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(stateBlob, stateBlob.length));
      return this;
    }

    public SendStateToRemote_args setStateBlob(ByteBuffer stateBlob) {
      this.stateBlob = org.apache.thrift.TBaseHelper.copyBinary(stateBlob);
      return this;
    }

    public void unsetStateBlob() {
      this.stateBlob = null;
    }

    /** Returns true if field stateBlob is set (has been assigned a value) and false otherwise */
    public boolean isSetStateBlob() {
      return this.stateBlob != null;
    }

    public void setStateBlobIsSet(boolean value) {
      if (!value) {
        this.stateBlob = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STATE_BLOB:
        if (value == null) {
          unsetStateBlob();
        } else {
          setStateBlob((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STATE_BLOB:
        return getStateBlob();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STATE_BLOB:
        return isSetStateBlob();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SendStateToRemote_args)
        return this.equals((SendStateToRemote_args)that);
      return false;
    }

    public boolean equals(SendStateToRemote_args that) {
      if (that == null)
        return false;

      boolean this_present_stateBlob = true && this.isSetStateBlob();
      boolean that_present_stateBlob = true && that.isSetStateBlob();
      if (this_present_stateBlob || that_present_stateBlob) {
        if (!(this_present_stateBlob && that_present_stateBlob))
          return false;
        if (!this.stateBlob.equals(that.stateBlob))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stateBlob = true && (isSetStateBlob());
      list.add(present_stateBlob);
      if (present_stateBlob)
        list.add(stateBlob);

      return list.hashCode();
    }

    @Override
    public int compareTo(SendStateToRemote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStateBlob()).compareTo(other.isSetStateBlob());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStateBlob()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stateBlob, other.stateBlob);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SendStateToRemote_args(");
      boolean first = true;

      sb.append("stateBlob:");
      if (this.stateBlob == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.stateBlob, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SendStateToRemote_argsStandardSchemeFactory implements SchemeFactory {
      public SendStateToRemote_argsStandardScheme getScheme() {
        return new SendStateToRemote_argsStandardScheme();
      }
    }

    private static class SendStateToRemote_argsStandardScheme extends StandardScheme<SendStateToRemote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SendStateToRemote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATE_BLOB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stateBlob = iprot.readBinary();
                struct.setStateBlobIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SendStateToRemote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stateBlob != null) {
          oprot.writeFieldBegin(STATE_BLOB_FIELD_DESC);
          oprot.writeBinary(struct.stateBlob);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SendStateToRemote_argsTupleSchemeFactory implements SchemeFactory {
      public SendStateToRemote_argsTupleScheme getScheme() {
        return new SendStateToRemote_argsTupleScheme();
      }
    }

    private static class SendStateToRemote_argsTupleScheme extends TupleScheme<SendStateToRemote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SendStateToRemote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStateBlob()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStateBlob()) {
          oprot.writeBinary(struct.stateBlob);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SendStateToRemote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.stateBlob = iprot.readBinary();
          struct.setStateBlobIsSet(true);
        }
      }
    }

  }

  public static class RequestStateFromRemote_args implements org.apache.thrift.TBase<RequestStateFromRemote_args, RequestStateFromRemote_args._Fields>, java.io.Serializable, Cloneable, Comparable<RequestStateFromRemote_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestStateFromRemote_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RequestStateFromRemote_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RequestStateFromRemote_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestStateFromRemote_args.class, metaDataMap);
    }

    public RequestStateFromRemote_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestStateFromRemote_args(RequestStateFromRemote_args other) {
    }

    public RequestStateFromRemote_args deepCopy() {
      return new RequestStateFromRemote_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RequestStateFromRemote_args)
        return this.equals((RequestStateFromRemote_args)that);
      return false;
    }

    public boolean equals(RequestStateFromRemote_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(RequestStateFromRemote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RequestStateFromRemote_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestStateFromRemote_argsStandardSchemeFactory implements SchemeFactory {
      public RequestStateFromRemote_argsStandardScheme getScheme() {
        return new RequestStateFromRemote_argsStandardScheme();
      }
    }

    private static class RequestStateFromRemote_argsStandardScheme extends StandardScheme<RequestStateFromRemote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestStateFromRemote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestStateFromRemote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestStateFromRemote_argsTupleSchemeFactory implements SchemeFactory {
      public RequestStateFromRemote_argsTupleScheme getScheme() {
        return new RequestStateFromRemote_argsTupleScheme();
      }
    }

    private static class RequestStateFromRemote_argsTupleScheme extends TupleScheme<RequestStateFromRemote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestStateFromRemote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestStateFromRemote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class SendCompletedJobsToRemote_args implements org.apache.thrift.TBase<SendCompletedJobsToRemote_args, SendCompletedJobsToRemote_args._Fields>, java.io.Serializable, Cloneable, Comparable<SendCompletedJobsToRemote_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SendCompletedJobsToRemote_args");

    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField V_JOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("vJobs", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SendCompletedJobsToRemote_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SendCompletedJobsToRemote_argsTupleSchemeFactory());
    }

    public int size; // required
    public List<ByteBuffer> vJobs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIZE((short)1, "size"),
      V_JOBS((short)2, "vJobs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIZE
            return SIZE;
          case 2: // V_JOBS
            return V_JOBS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SIZE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.V_JOBS, new org.apache.thrift.meta_data.FieldMetaData("vJobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendCompletedJobsToRemote_args.class, metaDataMap);
    }

    public SendCompletedJobsToRemote_args() {
    }

    public SendCompletedJobsToRemote_args(
      int size,
      List<ByteBuffer> vJobs)
    {
      this();
      this.size = size;
      setSizeIsSet(true);
      this.vJobs = vJobs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SendCompletedJobsToRemote_args(SendCompletedJobsToRemote_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.size = other.size;
      if (other.isSetVJobs()) {
        List<ByteBuffer> __this__vJobs = new ArrayList<ByteBuffer>(other.vJobs);
        this.vJobs = __this__vJobs;
      }
    }

    public SendCompletedJobsToRemote_args deepCopy() {
      return new SendCompletedJobsToRemote_args(this);
    }

    @Override
    public void clear() {
      setSizeIsSet(false);
      this.size = 0;
      this.vJobs = null;
    }

    public int getSize() {
      return this.size;
    }

    public SendCompletedJobsToRemote_args setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
      return this;
    }

    public void unsetSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
    }

    public int getVJobsSize() {
      return (this.vJobs == null) ? 0 : this.vJobs.size();
    }

    public java.util.Iterator<ByteBuffer> getVJobsIterator() {
      return (this.vJobs == null) ? null : this.vJobs.iterator();
    }

    public void addToVJobs(ByteBuffer elem) {
      if (this.vJobs == null) {
        this.vJobs = new ArrayList<ByteBuffer>();
      }
      this.vJobs.add(elem);
    }

    public List<ByteBuffer> getVJobs() {
      return this.vJobs;
    }

    public SendCompletedJobsToRemote_args setVJobs(List<ByteBuffer> vJobs) {
      this.vJobs = vJobs;
      return this;
    }

    public void unsetVJobs() {
      this.vJobs = null;
    }

    /** Returns true if field vJobs is set (has been assigned a value) and false otherwise */
    public boolean isSetVJobs() {
      return this.vJobs != null;
    }

    public void setVJobsIsSet(boolean value) {
      if (!value) {
        this.vJobs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          setSize((Integer)value);
        }
        break;

      case V_JOBS:
        if (value == null) {
          unsetVJobs();
        } else {
          setVJobs((List<ByteBuffer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIZE:
        return Integer.valueOf(getSize());

      case V_JOBS:
        return getVJobs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIZE:
        return isSetSize();
      case V_JOBS:
        return isSetVJobs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SendCompletedJobsToRemote_args)
        return this.equals((SendCompletedJobsToRemote_args)that);
      return false;
    }

    public boolean equals(SendCompletedJobsToRemote_args that) {
      if (that == null)
        return false;

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      boolean this_present_vJobs = true && this.isSetVJobs();
      boolean that_present_vJobs = true && that.isSetVJobs();
      if (this_present_vJobs || that_present_vJobs) {
        if (!(this_present_vJobs && that_present_vJobs))
          return false;
        if (!this.vJobs.equals(that.vJobs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_size = true;
      list.add(present_size);
      if (present_size)
        list.add(size);

      boolean present_vJobs = true && (isSetVJobs());
      list.add(present_vJobs);
      if (present_vJobs)
        list.add(vJobs);

      return list.hashCode();
    }

    @Override
    public int compareTo(SendCompletedJobsToRemote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVJobs()).compareTo(other.isSetVJobs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVJobs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vJobs, other.vJobs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SendCompletedJobsToRemote_args(");
      boolean first = true;

      sb.append("size:");
      sb.append(this.size);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vJobs:");
      if (this.vJobs == null) {
        sb.append("null");
      } else {
        sb.append(this.vJobs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SendCompletedJobsToRemote_argsStandardSchemeFactory implements SchemeFactory {
      public SendCompletedJobsToRemote_argsStandardScheme getScheme() {
        return new SendCompletedJobsToRemote_argsStandardScheme();
      }
    }

    private static class SendCompletedJobsToRemote_argsStandardScheme extends StandardScheme<SendCompletedJobsToRemote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SendCompletedJobsToRemote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.size = iprot.readI32();
                struct.setSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // V_JOBS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.vJobs = new ArrayList<ByteBuffer>(_list8.size);
                  ByteBuffer _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readBinary();
                    struct.vJobs.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setVJobsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SendCompletedJobsToRemote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        oprot.writeI32(struct.size);
        oprot.writeFieldEnd();
        if (struct.vJobs != null) {
          oprot.writeFieldBegin(V_JOBS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.vJobs.size()));
            for (ByteBuffer _iter11 : struct.vJobs)
            {
              oprot.writeBinary(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SendCompletedJobsToRemote_argsTupleSchemeFactory implements SchemeFactory {
      public SendCompletedJobsToRemote_argsTupleScheme getScheme() {
        return new SendCompletedJobsToRemote_argsTupleScheme();
      }
    }

    private static class SendCompletedJobsToRemote_argsTupleScheme extends TupleScheme<SendCompletedJobsToRemote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SendCompletedJobsToRemote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSize()) {
          optionals.set(0);
        }
        if (struct.isSetVJobs()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSize()) {
          oprot.writeI32(struct.size);
        }
        if (struct.isSetVJobs()) {
          {
            oprot.writeI32(struct.vJobs.size());
            for (ByteBuffer _iter12 : struct.vJobs)
            {
              oprot.writeBinary(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SendCompletedJobsToRemote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.size = iprot.readI32();
          struct.setSizeIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.vJobs = new ArrayList<ByteBuffer>(_list13.size);
            ByteBuffer _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readBinary();
              struct.vJobs.add(_elem14);
            }
          }
          struct.setVJobsIsSet(true);
        }
      }
    }

  }

  public static class RequestCompletedJobsFromRemote_args implements org.apache.thrift.TBase<RequestCompletedJobsFromRemote_args, RequestCompletedJobsFromRemote_args._Fields>, java.io.Serializable, Cloneable, Comparable<RequestCompletedJobsFromRemote_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestCompletedJobsFromRemote_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RequestCompletedJobsFromRemote_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RequestCompletedJobsFromRemote_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestCompletedJobsFromRemote_args.class, metaDataMap);
    }

    public RequestCompletedJobsFromRemote_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestCompletedJobsFromRemote_args(RequestCompletedJobsFromRemote_args other) {
    }

    public RequestCompletedJobsFromRemote_args deepCopy() {
      return new RequestCompletedJobsFromRemote_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RequestCompletedJobsFromRemote_args)
        return this.equals((RequestCompletedJobsFromRemote_args)that);
      return false;
    }

    public boolean equals(RequestCompletedJobsFromRemote_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(RequestCompletedJobsFromRemote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RequestCompletedJobsFromRemote_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestCompletedJobsFromRemote_argsStandardSchemeFactory implements SchemeFactory {
      public RequestCompletedJobsFromRemote_argsStandardScheme getScheme() {
        return new RequestCompletedJobsFromRemote_argsStandardScheme();
      }
    }

    private static class RequestCompletedJobsFromRemote_argsStandardScheme extends StandardScheme<RequestCompletedJobsFromRemote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestCompletedJobsFromRemote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestCompletedJobsFromRemote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestCompletedJobsFromRemote_argsTupleSchemeFactory implements SchemeFactory {
      public RequestCompletedJobsFromRemote_argsTupleScheme getScheme() {
        return new RequestCompletedJobsFromRemote_argsTupleScheme();
      }
    }

    private static class RequestCompletedJobsFromRemote_argsTupleScheme extends TupleScheme<RequestCompletedJobsFromRemote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestCompletedJobsFromRemote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestCompletedJobsFromRemote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetStateInfo_args implements org.apache.thrift.TBase<GetStateInfo_args, GetStateInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetStateInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetStateInfo_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetStateInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetStateInfo_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetStateInfo_args.class, metaDataMap);
    }

    public GetStateInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetStateInfo_args(GetStateInfo_args other) {
    }

    public GetStateInfo_args deepCopy() {
      return new GetStateInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetStateInfo_args)
        return this.equals((GetStateInfo_args)that);
      return false;
    }

    public boolean equals(GetStateInfo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(GetStateInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetStateInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetStateInfo_argsStandardSchemeFactory implements SchemeFactory {
      public GetStateInfo_argsStandardScheme getScheme() {
        return new GetStateInfo_argsStandardScheme();
      }
    }

    private static class GetStateInfo_argsStandardScheme extends StandardScheme<GetStateInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetStateInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetStateInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetStateInfo_argsTupleSchemeFactory implements SchemeFactory {
      public GetStateInfo_argsTupleScheme getScheme() {
        return new GetStateInfo_argsTupleScheme();
      }
    }

    private static class GetStateInfo_argsTupleScheme extends TupleScheme<GetStateInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetStateInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetStateInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetStateInfo_result implements org.apache.thrift.TBase<GetStateInfo_result, GetStateInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetStateInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetStateInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetStateInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetStateInfo_resultTupleSchemeFactory());
    }

    public UIState success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UIState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetStateInfo_result.class, metaDataMap);
    }

    public GetStateInfo_result() {
    }

    public GetStateInfo_result(
      UIState success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetStateInfo_result(GetStateInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new UIState(other.success);
      }
    }

    public GetStateInfo_result deepCopy() {
      return new GetStateInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UIState getSuccess() {
      return this.success;
    }

    public GetStateInfo_result setSuccess(UIState success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UIState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetStateInfo_result)
        return this.equals((GetStateInfo_result)that);
      return false;
    }

    public boolean equals(GetStateInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetStateInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetStateInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetStateInfo_resultStandardSchemeFactory implements SchemeFactory {
      public GetStateInfo_resultStandardScheme getScheme() {
        return new GetStateInfo_resultStandardScheme();
      }
    }

    private static class GetStateInfo_resultStandardScheme extends StandardScheme<GetStateInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetStateInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UIState();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetStateInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetStateInfo_resultTupleSchemeFactory implements SchemeFactory {
      public GetStateInfo_resultTupleScheme getScheme() {
        return new GetStateInfo_resultTupleScheme();
      }
    }

    private static class GetStateInfo_resultTupleScheme extends TupleScheme<GetStateInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetStateInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetStateInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UIState();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class SetThrottling_args implements org.apache.thrift.TBase<SetThrottling_args, SetThrottling_args._Fields>, java.io.Serializable, Cloneable, Comparable<SetThrottling_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetThrottling_args");

    private static final org.apache.thrift.protocol.TField THROTTLING_FIELD_DESC = new org.apache.thrift.protocol.TField("throttling", org.apache.thrift.protocol.TType.DOUBLE, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetThrottling_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetThrottling_argsTupleSchemeFactory());
    }

    public double throttling; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      THROTTLING((short)1, "throttling");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // THROTTLING
            return THROTTLING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __THROTTLING_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.THROTTLING, new org.apache.thrift.meta_data.FieldMetaData("throttling", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetThrottling_args.class, metaDataMap);
    }

    public SetThrottling_args() {
    }

    public SetThrottling_args(
      double throttling)
    {
      this();
      this.throttling = throttling;
      setThrottlingIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetThrottling_args(SetThrottling_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.throttling = other.throttling;
    }

    public SetThrottling_args deepCopy() {
      return new SetThrottling_args(this);
    }

    @Override
    public void clear() {
      setThrottlingIsSet(false);
      this.throttling = 0.0;
    }

    public double getThrottling() {
      return this.throttling;
    }

    public SetThrottling_args setThrottling(double throttling) {
      this.throttling = throttling;
      setThrottlingIsSet(true);
      return this;
    }

    public void unsetThrottling() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THROTTLING_ISSET_ID);
    }

    /** Returns true if field throttling is set (has been assigned a value) and false otherwise */
    public boolean isSetThrottling() {
      return EncodingUtils.testBit(__isset_bitfield, __THROTTLING_ISSET_ID);
    }

    public void setThrottlingIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THROTTLING_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case THROTTLING:
        if (value == null) {
          unsetThrottling();
        } else {
          setThrottling((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case THROTTLING:
        return Double.valueOf(getThrottling());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case THROTTLING:
        return isSetThrottling();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetThrottling_args)
        return this.equals((SetThrottling_args)that);
      return false;
    }

    public boolean equals(SetThrottling_args that) {
      if (that == null)
        return false;

      boolean this_present_throttling = true;
      boolean that_present_throttling = true;
      if (this_present_throttling || that_present_throttling) {
        if (!(this_present_throttling && that_present_throttling))
          return false;
        if (this.throttling != that.throttling)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_throttling = true;
      list.add(present_throttling);
      if (present_throttling)
        list.add(throttling);

      return list.hashCode();
    }

    @Override
    public int compareTo(SetThrottling_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetThrottling()).compareTo(other.isSetThrottling());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThrottling()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.throttling, other.throttling);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetThrottling_args(");
      boolean first = true;

      sb.append("throttling:");
      sb.append(this.throttling);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetThrottling_argsStandardSchemeFactory implements SchemeFactory {
      public SetThrottling_argsStandardScheme getScheme() {
        return new SetThrottling_argsStandardScheme();
      }
    }

    private static class SetThrottling_argsStandardScheme extends StandardScheme<SetThrottling_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetThrottling_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // THROTTLING
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.throttling = iprot.readDouble();
                struct.setThrottlingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetThrottling_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(THROTTLING_FIELD_DESC);
        oprot.writeDouble(struct.throttling);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetThrottling_argsTupleSchemeFactory implements SchemeFactory {
      public SetThrottling_argsTupleScheme getScheme() {
        return new SetThrottling_argsTupleScheme();
      }
    }

    private static class SetThrottling_argsTupleScheme extends TupleScheme<SetThrottling_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetThrottling_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetThrottling()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetThrottling()) {
          oprot.writeDouble(struct.throttling);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetThrottling_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.throttling = iprot.readDouble();
          struct.setThrottlingIsSet(true);
        }
      }
    }

  }

  public static class SetThrottling_result implements org.apache.thrift.TBase<SetThrottling_result, SetThrottling_result._Fields>, java.io.Serializable, Cloneable, Comparable<SetThrottling_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetThrottling_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetThrottling_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetThrottling_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetThrottling_result.class, metaDataMap);
    }

    public SetThrottling_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetThrottling_result(SetThrottling_result other) {
    }

    public SetThrottling_result deepCopy() {
      return new SetThrottling_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetThrottling_result)
        return this.equals((SetThrottling_result)that);
      return false;
    }

    public boolean equals(SetThrottling_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(SetThrottling_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetThrottling_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetThrottling_resultStandardSchemeFactory implements SchemeFactory {
      public SetThrottling_resultStandardScheme getScheme() {
        return new SetThrottling_resultStandardScheme();
      }
    }

    private static class SetThrottling_resultStandardScheme extends StandardScheme<SetThrottling_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetThrottling_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetThrottling_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetThrottling_resultTupleSchemeFactory implements SchemeFactory {
      public SetThrottling_resultTupleScheme getScheme() {
        return new SetThrottling_resultTupleScheme();
      }
    }

    private static class SetThrottling_resultTupleScheme extends TupleScheme<SetThrottling_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetThrottling_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetThrottling_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
